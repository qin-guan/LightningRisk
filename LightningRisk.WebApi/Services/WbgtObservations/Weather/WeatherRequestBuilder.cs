// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace LightningRisk.Services.WbgtObservations.Weather
{
    /// <summary>
    /// Builds and executes requests for operations under \weather
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WeatherRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WeatherRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/weather{?api*,date*,paginationToken*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WeatherRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/weather{?api*,date*,paginationToken*}", rawUrl)
        {
        }
        /// <summary>
        /// **[https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt](https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt)**&lt;br/&gt;- Updated multiple times throughout the day&lt;br/&gt;- Filter for specific date or date-time by providing `date` in query parameter.  - use YYYY-MM-DD format to retrieve all of the readings for that day  - use YYYY-MM-DDTHH:mm:ss to retrieve the latest readings at that moment in time  - example: `?date=2025-01-16` or `?date=2025-01-16T23:59:00`
        /// </summary>
        /// <returns>A <see cref="global::LightningRisk.Services.WbgtObservations.Weather.WeatherGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::LightningRisk.Services.WbgtObservations.Weather.Weather400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::LightningRisk.Services.WbgtObservations.Weather.Weather404Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::LightningRisk.Services.WbgtObservations.Weather.WeatherGetResponse?> GetAsWeatherGetResponseAsync(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::LightningRisk.Services.WbgtObservations.Weather.WeatherGetResponse> GetAsWeatherGetResponseAsync(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::LightningRisk.Services.WbgtObservations.Weather.Weather400Error.CreateFromDiscriminatorValue },
                { "404", global::LightningRisk.Services.WbgtObservations.Weather.Weather404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::LightningRisk.Services.WbgtObservations.Weather.WeatherGetResponse>(requestInfo, global::LightningRisk.Services.WbgtObservations.Weather.WeatherGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// **[https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt](https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt)**&lt;br/&gt;- Updated multiple times throughout the day&lt;br/&gt;- Filter for specific date or date-time by providing `date` in query parameter.  - use YYYY-MM-DD format to retrieve all of the readings for that day  - use YYYY-MM-DDTHH:mm:ss to retrieve the latest readings at that moment in time  - example: `?date=2025-01-16` or `?date=2025-01-16T23:59:00`
        /// </summary>
        /// <returns>A <see cref="global::LightningRisk.Services.WbgtObservations.Weather.WeatherResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::LightningRisk.Services.WbgtObservations.Weather.Weather400Error">When receiving a 400 status code</exception>
        /// <exception cref="global::LightningRisk.Services.WbgtObservations.Weather.Weather404Error">When receiving a 404 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsWeatherGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::LightningRisk.Services.WbgtObservations.Weather.WeatherResponse?> GetAsync(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::LightningRisk.Services.WbgtObservations.Weather.WeatherResponse> GetAsync(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::LightningRisk.Services.WbgtObservations.Weather.Weather400Error.CreateFromDiscriminatorValue },
                { "404", global::LightningRisk.Services.WbgtObservations.Weather.Weather404Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::LightningRisk.Services.WbgtObservations.Weather.WeatherResponse>(requestInfo, global::LightningRisk.Services.WbgtObservations.Weather.WeatherResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// **[https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt](https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt)**&lt;br/&gt;- Updated multiple times throughout the day&lt;br/&gt;- Filter for specific date or date-time by providing `date` in query parameter.  - use YYYY-MM-DD format to retrieve all of the readings for that day  - use YYYY-MM-DDTHH:mm:ss to retrieve the latest readings at that moment in time  - example: `?date=2025-01-16` or `?date=2025-01-16T23:59:00`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder WithUrl(string rawUrl)
        {
            return new global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// **[https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt](https://api-open.data.gov.sg/v2/real-time/api/weather?api=wbgt)**&lt;br/&gt;- Updated multiple times throughout the day&lt;br/&gt;- Filter for specific date or date-time by providing `date` in query parameter.  - use YYYY-MM-DD format to retrieve all of the readings for that day  - use YYYY-MM-DDTHH:mm:ss to retrieve the latest readings at that moment in time  - example: `?date=2025-01-16` or `?date=2025-01-16T23:59:00`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WeatherRequestBuilderGetQueryParameters 
        {
            /// <summary>Set the value to `wbgt` to fetch WBGT records</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("api")]
            public string? Api { get; set; }
#nullable restore
#else
            [QueryParameter("api")]
            public string Api { get; set; }
#endif
            /// <summary>SGT date (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS). Example: 2025-01-16 or 2025-01-16T23:59:00</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("date")]
            public string? Date { get; set; }
#nullable restore
#else
            [QueryParameter("date")]
            public string Date { get; set; }
#endif
            /// <summary>Pagination token for retrieving subsequent data pages</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("paginationToken")]
            public string? PaginationToken { get; set; }
#nullable restore
#else
            [QueryParameter("paginationToken")]
            public string PaginationToken { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WeatherRequestBuilderGetRequestConfiguration : RequestConfiguration<global::LightningRisk.Services.WbgtObservations.Weather.WeatherRequestBuilder.WeatherRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
