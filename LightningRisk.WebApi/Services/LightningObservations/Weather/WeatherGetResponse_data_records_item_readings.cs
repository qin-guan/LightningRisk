// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace LightningRisk.Services.LightningObservations.Weather
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WeatherGetResponse_data_records_item_readings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date and time when the weather reading was taken, formatted in ISO 8601.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Datetime { get; set; }
#nullable restore
#else
        public string Datetime { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings_location? Location { get; set; }
#nullable restore
#else
        public global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings_location Location { get; set; }
#endif
        /// <summary>A textual description of the weather event, which can include types such as &quot;Cloud to Cloud&quot; or &quot;Cloud to Ground.&quot;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>The type of lightning event, which can be either &quot;C&quot; for Cloud to Cloud or &quot;G&quot; for Cloud to Ground.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings"/> and sets the default values.
        /// </summary>
        public WeatherGetResponse_data_records_item_readings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "datetime", n => { Datetime = n.GetStringValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings_location>(global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings_location.CreateFromDiscriminatorValue); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("datetime", Datetime);
            writer.WriteObjectValue<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings_location>("location", Location);
            writer.WriteStringValue("text", Text);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
