// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace LightningRisk.Services.LightningObservations.Weather
{
    /// <summary>
    /// A weather observation for the lightning
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WeatherGetResponse_data_records_item : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether the weather information includes station information.</summary>
        public bool? IsStationData { get; set; }
        /// <summary>The readings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings>? Readings { get; set; }
#nullable restore
#else
        public List<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings> Readings { get; set; }
#endif
        /// <summary>Type of the weather information (`observation` or `forecast`). Lightning is always `observation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item"/> and sets the default values.
        /// </summary>
        public WeatherGetResponse_data_records_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "isStationData", n => { IsStationData = n.GetBoolValue(); } },
                { "readings", n => { Readings = n.GetCollectionOfObjectValues<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings>(global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings.CreateFromDiscriminatorValue)?.AsList(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isStationData", IsStationData);
            writer.WriteCollectionOfObjectValues<global::LightningRisk.Services.LightningObservations.Weather.WeatherGetResponse_data_records_item_readings>("readings", Readings);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
